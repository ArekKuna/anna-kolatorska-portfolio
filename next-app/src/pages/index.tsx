import Head from "next/head";
import { GetStaticProps } from "next";
import { sdk } from "graphql/client";
import { UploadFileEntity } from "graphql/generated";
import { getPlaiceholder } from "plaiceholder";
import { HomePageSlider } from "components/HomePageSlider/HomePageSlider";
import { AboutMe } from "components/AboutMe/AboutMe";
import { SessionInfoLtr } from "components/SessionInfo/SessionInfoLtr/SessionInfoLtr";
import { SessionInfoRtl } from "components/SessionInfo/SessionInfRtl/SessionInfoRtl";
import { InstagramFeed } from "components/InstagramFeed/InstagramFeed";
import {
  AboutMeSectionData,
  FormattedStrapiImageData,
  SessionData,
} from "types/types";

type Props = {
  formattedLayoutSliderImagesData: FormattedStrapiImageData[];
  aboutMeSectionData: AboutMeSectionData;
  sessionsData: SessionData[];
  formattedInstagramProfileImage: FormattedStrapiImageData;
};

const HomePage = ({
  formattedLayoutSliderImagesData,
  aboutMeSectionData,
  sessionsData,
  formattedInstagramProfileImage,
}: Props) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="col-span-full">
        <HomePageSlider data={formattedLayoutSliderImagesData} />
      </section>
      <section className="grid col-span-10 col-start-2 pb-10">
        <AboutMe data={aboutMeSectionData} />
      </section>
      <section className="grid grid-cols-12 col-span-full gap-y-40">
        {sessionsData.map((session) =>
          session.ltr ? (
            <SessionInfoLtr key={session.id} session={session} />
          ) : (
            <SessionInfoRtl key={session.id} session={session} />
          )
        )}
      </section>
      <section className="grid grid-cols-12 col-span-full">
        <InstagramFeed instagramProfileImage={formattedInstagramProfileImage} />
      </section>
    </>
  );
};

const getStrapiStaticImage = async (image: UploadFileEntity) => {
  const url = image.attributes?.url;
  const alt = image.attributes?.alternativeText;
  const width = image.attributes?.width;
  const height = image.attributes?.height;

  const buffer = await fetch(
    `${process.env.NEXT_PUBLIC_STRAPI_API_URL}${url}`
  ).then(async (res) => Buffer.from(await res.arrayBuffer()));

  const { base64 } = await getPlaiceholder(buffer);

  return {
    url,
    alt,
    base64,
    width,
    height,
  };
};

export const getStaticProps: GetStaticProps = async () => {
  const { layoutSlider } = await sdk.GetLayoutSlider({
    slug: "1",
  });

  const { aboutMe } = await sdk.GetAbouMeSection({
    slug: "1",
  });

  const { sessions } = await sdk.GetSessions({
    slug: "1",
  });

  const { instagramProfileImage } = await sdk.GetInstagramProfileImage({
    id: "1",
  });

  const layoutSliderImagesData =
    layoutSlider?.data?.attributes?.layoutSlider?.imagesArray?.data;

  const aboutMeSectionData = aboutMe?.data?.attributes?.aboutMe;

  const aboutMeSectionImage = aboutMeSectionData?.image?.data;

  const sessionsData = sessions?.data?.attributes?.session;

  const instagramProfileImageData =
    instagramProfileImage?.data?.attributes?.instagramProfileImage
      ?.instagramProfileImage.data;

  if (
    !layoutSliderImagesData ||
    !aboutMeSectionData ||
    !aboutMeSectionImage ||
    !sessionsData ||
    !instagramProfileImageData
  )
    return { notFound: true };

  const upperSesionImageData = sessionsData[0]?.image.data;
  const midSesionImageData = sessionsData[1]?.image.data;
  const lowerSesionImageData = sessionsData[2]?.image.data;

  if (
    !upperSesionImageData ||
    !midSesionImageData ||
    !lowerSesionImageData ||
    !instagramProfileImageData
  ) {
    return { notFound: true };
  }

  const formattedLayoutSliderImagesData = await Promise.all(
    layoutSliderImagesData.map(getStrapiStaticImage)
  );

  const formattedAboutMrSectionImage = await getStrapiStaticImage(
    aboutMeSectionImage
  );

  const formattedupperSesionImageData = await getStrapiStaticImage(
    upperSesionImageData
  );

  const formattedmidSesionImageData = await getStrapiStaticImage(
    midSesionImageData
  );

  const formattedlowerSesionImageData = await getStrapiStaticImage(
    lowerSesionImageData
  );

  const formattedInstagramProfileImage = await getStrapiStaticImage(
    instagramProfileImageData
  );

  return {
    props: {
      formattedLayoutSliderImagesData,
      aboutMeSectionData: {
        title: aboutMeSectionData.title,
        description: aboutMeSectionData.description,
        image: formattedAboutMrSectionImage,
      },
      sessionsData: [
        { ...sessionsData[0], image: formattedupperSesionImageData },
        { ...sessionsData[1], image: formattedmidSesionImageData },
        { ...sessionsData[2], image: formattedlowerSesionImageData },
      ],
      formattedInstagramProfileImage,
    },
  };
};

export default HomePage;
